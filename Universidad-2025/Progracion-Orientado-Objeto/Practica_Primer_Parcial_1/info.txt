üîπ Clases a implementar
1. Cliente
Atributos:

nombre

apellido

tipoDocumento

numeroDocumento

activo (booleano)

M√©todos:

Constructor

Getters y setters

M√©todo __toString() que devuelva una descripci√≥n legible del cliente.

M√©todo darDeBaja() que cambia el estado a inactivo.

2. Auto
Atributos:

patente

marca

modelo

anio

costoPorDia

activo (booleano)

M√©todos:

Constructor

Getters y setters

M√©todo __toString() con toda la info.

M√©todo darDeBaja() que lo marca como inactivo.

3. Alquiler
Atributos:

cliente (objeto)

auto (objeto)

dias

fecha (string)

precioFinal

M√©todos:

Constructor

M√©todo calcularPrecio() que devuelva el precio final (dias * costoPorDia)

__toString() con el resumen del alquiler

4. EmpresaAlquiler
Atributos:

nombre

direccion

clientes (colecci√≥n)

autos (colecci√≥n)

alquileres (colecci√≥n)

M√©todos:

Constructor

registrarAlquiler($tipoDoc, $numDoc, $patente, $dias)

Valida que el cliente y el auto est√©n activos.

Crea un alquiler y lo guarda si todo es correcto.

Devuelve el precio o -1 si hay error.

retornarAlquileresDeCliente($tipoDoc, $numDoc)

Devuelve array de alquileres de ese cliente.

__toString() que muestre nombre, direcci√≥n, cantidad de autos, clientes y alquileres.

üß™ Requisitos del testeo (test.php)
Crear una empresa.

Crear al menos 2 autos y 2 clientes.

Realizar al menos 3 intentos de alquiler (uno debe fallar).

Imprimir el resultado de cada alquiler.

Mostrar los alquileres de cada cliente.

Mostrar la informaci√≥n final de la empresa.

üîö Extra (si quer√©s sumar puntos)
Implementar un m√©todo darDeBajaAutoPorPatente($patente) en la empresa.

Agregar una validaci√≥n para que un auto no pueda alquilarse si ya est√° alquilado (asumimos un solo alquiler activo por auto).

